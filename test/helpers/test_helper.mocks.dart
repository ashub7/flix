// Mocks generated by Mockito 5.4.4 from annotations
// in flix/test/helpers/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:flix/core/errors/api_failure.dart' as _i11;
import 'package:flix/data/remote/models/cast_response.dart' as _i8;
import 'package:flix/data/remote/models/movie_detail_response.dart' as _i7;
import 'package:flix/data/remote/models/movie_list_response.dart' as _i6;
import 'package:flix/data/remote/models/movie_photos_response.dart' as _i9;
import 'package:flix/data/remote/service/web_service.dart' as _i4;
import 'package:flix/domain/entities/cast_entity.dart' as _i14;
import 'package:flix/domain/entities/movie_detail_entity.dart' as _i13;
import 'package:flix/domain/entities/movie_list_entity.dart' as _i12;
import 'package:flix/domain/entities/movie_photos_entity.dart' as _i15;
import 'package:flix/domain/repository/movie_repository.dart' as _i10;
import 'package:mockito/mockito.dart' as _i1;
import 'package:retrofit/retrofit.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeHttpResponse_0<T> extends _i1.SmartFake
    implements _i2.HttpResponse<T> {
  _FakeHttpResponse_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [WebService].
///
/// See the documentation for Mockito's code generation for more information.
class MockWebService extends _i1.Mock implements _i4.WebService {
  MockWebService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.HttpResponse<_i6.MovieListResponse>> getLatestMovies(
          int? page) =>
      (super.noSuchMethod(
        Invocation.method(
          #getLatestMovies,
          [page],
        ),
        returnValue: _i5.Future<_i2.HttpResponse<_i6.MovieListResponse>>.value(
            _FakeHttpResponse_0<_i6.MovieListResponse>(
          this,
          Invocation.method(
            #getLatestMovies,
            [page],
          ),
        )),
      ) as _i5.Future<_i2.HttpResponse<_i6.MovieListResponse>>);

  @override
  _i5.Future<_i2.HttpResponse<_i6.MovieListResponse>> getTopRatedMovies(
          int? page) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTopRatedMovies,
          [page],
        ),
        returnValue: _i5.Future<_i2.HttpResponse<_i6.MovieListResponse>>.value(
            _FakeHttpResponse_0<_i6.MovieListResponse>(
          this,
          Invocation.method(
            #getTopRatedMovies,
            [page],
          ),
        )),
      ) as _i5.Future<_i2.HttpResponse<_i6.MovieListResponse>>);

  @override
  _i5.Future<_i2.HttpResponse<_i7.MovieDetailResponse>> getMovieDetail(
          int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMovieDetail,
          [id],
        ),
        returnValue:
            _i5.Future<_i2.HttpResponse<_i7.MovieDetailResponse>>.value(
                _FakeHttpResponse_0<_i7.MovieDetailResponse>(
          this,
          Invocation.method(
            #getMovieDetail,
            [id],
          ),
        )),
      ) as _i5.Future<_i2.HttpResponse<_i7.MovieDetailResponse>>);

  @override
  _i5.Future<_i2.HttpResponse<_i8.CastListResponse>> getMovieCast(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMovieCast,
          [id],
        ),
        returnValue: _i5.Future<_i2.HttpResponse<_i8.CastListResponse>>.value(
            _FakeHttpResponse_0<_i8.CastListResponse>(
          this,
          Invocation.method(
            #getMovieCast,
            [id],
          ),
        )),
      ) as _i5.Future<_i2.HttpResponse<_i8.CastListResponse>>);

  @override
  _i5.Future<_i2.HttpResponse<_i9.MoviePhotosResponse>> getMoviePhotos(
          int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMoviePhotos,
          [id],
        ),
        returnValue:
            _i5.Future<_i2.HttpResponse<_i9.MoviePhotosResponse>>.value(
                _FakeHttpResponse_0<_i9.MoviePhotosResponse>(
          this,
          Invocation.method(
            #getMoviePhotos,
            [id],
          ),
        )),
      ) as _i5.Future<_i2.HttpResponse<_i9.MoviePhotosResponse>>);
}

/// A class which mocks [MovieRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieRepository extends _i1.Mock implements _i10.MovieRepository {
  MockMovieRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.Either<_i11.ApiFailure, _i12.MovieListEntity>> getLatestMovies(
          int? page) =>
      (super.noSuchMethod(
        Invocation.method(
          #getLatestMovies,
          [page],
        ),
        returnValue:
            _i5.Future<_i3.Either<_i11.ApiFailure, _i12.MovieListEntity>>.value(
                _FakeEither_1<_i11.ApiFailure, _i12.MovieListEntity>(
          this,
          Invocation.method(
            #getLatestMovies,
            [page],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i11.ApiFailure, _i12.MovieListEntity>>);

  @override
  _i5.Future<
      _i3.Either<_i11.ApiFailure, _i12.MovieListEntity>> getTopRatedMovies(
          int? page) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTopRatedMovies,
          [page],
        ),
        returnValue:
            _i5.Future<_i3.Either<_i11.ApiFailure, _i12.MovieListEntity>>.value(
                _FakeEither_1<_i11.ApiFailure, _i12.MovieListEntity>(
          this,
          Invocation.method(
            #getTopRatedMovies,
            [page],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i11.ApiFailure, _i12.MovieListEntity>>);

  @override
  _i5.Future<_i3.Either<_i11.ApiFailure, _i13.MovieDetailEntity>>
      getMovieDetail(int? movieId) => (super.noSuchMethod(
            Invocation.method(
              #getMovieDetail,
              [movieId],
            ),
            returnValue: _i5.Future<
                    _i3.Either<_i11.ApiFailure, _i13.MovieDetailEntity>>.value(
                _FakeEither_1<_i11.ApiFailure, _i13.MovieDetailEntity>(
              this,
              Invocation.method(
                #getMovieDetail,
                [movieId],
              ),
            )),
          ) as _i5.Future<_i3.Either<_i11.ApiFailure, _i13.MovieDetailEntity>>);

  @override
  _i5.Future<_i3.Either<_i11.ApiFailure, List<_i14.CastEntity>>> getMovieCast(
          int? movieId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMovieCast,
          [movieId],
        ),
        returnValue: _i5
            .Future<_i3.Either<_i11.ApiFailure, List<_i14.CastEntity>>>.value(
            _FakeEither_1<_i11.ApiFailure, List<_i14.CastEntity>>(
          this,
          Invocation.method(
            #getMovieCast,
            [movieId],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i11.ApiFailure, List<_i14.CastEntity>>>);

  @override
  _i5.Future<_i3.Either<_i11.ApiFailure, _i15.MoviePhotosEntity>>
      getMoviePhotos(int? movieId) => (super.noSuchMethod(
            Invocation.method(
              #getMoviePhotos,
              [movieId],
            ),
            returnValue: _i5.Future<
                    _i3.Either<_i11.ApiFailure, _i15.MoviePhotosEntity>>.value(
                _FakeEither_1<_i11.ApiFailure, _i15.MoviePhotosEntity>(
              this,
              Invocation.method(
                #getMoviePhotos,
                [movieId],
              ),
            )),
          ) as _i5.Future<_i3.Either<_i11.ApiFailure, _i15.MoviePhotosEntity>>);
}
