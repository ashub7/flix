// Autogenerated from Pigeon (v17.1.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func createConnectionError(withChannelName channelName: String) -> FlutterError {
  return FlutterError(code: "channel-error", message: "Unable to establish connection on channel: '\(channelName)'.", details: "")
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

/// Generated class from Pigeon that represents data sent in messages.
struct DeviceInfoModel {
  var name: String? = nil

  static func fromList(_ list: [Any?]) -> DeviceInfoModel? {
    let name: String? = nilOrValue(list[0])

    return DeviceInfoModel(
      name: name
    )
  }
  func toList() -> [Any?] {
    return [
      name
    ]
  }
}
private class DeviceInfoManagerCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 128:
      return DeviceInfoModel.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class DeviceInfoManagerCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? DeviceInfoModel {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class DeviceInfoManagerCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return DeviceInfoManagerCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return DeviceInfoManagerCodecWriter(data: data)
  }
}

class DeviceInfoManagerCodec: FlutterStandardMessageCodec {
  static let shared = DeviceInfoManagerCodec(readerWriter: DeviceInfoManagerCodecReaderWriter())
}

/// FLUTTER FRAMEWORK -> FLUTTER ENGINE
///
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol DeviceInfoManager {
  func getDeviceInfo() throws -> DeviceInfoModel
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class DeviceInfoManagerSetup {
  /// The codec used by DeviceInfoManager.
  static var codec: FlutterStandardMessageCodec { DeviceInfoManagerCodec.shared }
  /// Sets up an instance of `DeviceInfoManager` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: DeviceInfoManager?) {
    let getDeviceInfoChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.pigeon_plugin.DeviceInfoManager.getDeviceInfo", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getDeviceInfoChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getDeviceInfo()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getDeviceInfoChannel.setMessageHandler(nil)
    }
  }
}
private class FlutterVersionManagerCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 128:
      return DeviceInfoModel.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class FlutterVersionManagerCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? DeviceInfoModel {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class FlutterVersionManagerCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return FlutterVersionManagerCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return FlutterVersionManagerCodecWriter(data: data)
  }
}

class FlutterVersionManagerCodec: FlutterStandardMessageCodec {
  static let shared = FlutterVersionManagerCodec(readerWriter: FlutterVersionManagerCodecReaderWriter())
}

/// FLUTTER FRAMEWORK <- FLUTTER ENGINE
///
/// Generated protocol from Pigeon that represents Flutter messages that can be called from Swift.
protocol FlutterVersionManagerProtocol {
  func deviceInfo(deviceInfoModel deviceInfoModelArg: DeviceInfoModel, completion: @escaping (Result<Void, FlutterError>) -> Void)
}
class FlutterVersionManager: FlutterVersionManagerProtocol {
  private let binaryMessenger: FlutterBinaryMessenger
  init(binaryMessenger: FlutterBinaryMessenger) {
    self.binaryMessenger = binaryMessenger
  }
  var codec: FlutterStandardMessageCodec {
    return FlutterVersionManagerCodec.shared
  }
  func deviceInfo(deviceInfoModel deviceInfoModelArg: DeviceInfoModel, completion: @escaping (Result<Void, FlutterError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.pigeon_plugin.FlutterVersionManager.deviceInfo"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([deviceInfoModelArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
}
